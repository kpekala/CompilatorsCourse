Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    UMINUS

Grammar

Rule 0     S' -> program
Rule 1     program -> ins_opt
Rule 2     ins_opt -> ins
Rule 3     ins -> ins in
Rule 4     ins -> in
Rule 5     in -> ;
Rule 6     in -> { ins }
Rule 7     in -> ID = expr ;
Rule 8     in -> ID ASSIGNADD expr ;
Rule 9     in -> ID ASSIGNMINUS expr ;
Rule 10    in -> ID ASSIGNMUL expr ;
Rule 11    in -> ID ASSIGNDIV expr ;
Rule 12    expr -> expr + expr
Rule 13    expr -> expr - expr
Rule 14    expr -> expr * expr
Rule 15    expr -> expr / expr
Rule 16    expr -> expr DOTADD expr
Rule 17    expr -> expr DOTMINUS expr
Rule 18    expr -> expr DOTTIMES expr
Rule 19    expr -> expr DOTDIVIDE expr
Rule 20    expr -> - expr
Rule 21    expr -> FLOATNUM
Rule 22    expr -> NUMBER
Rule 23    expr -> ID
Rule 24    expr -> STR
Rule 25    expr -> ( expr )
Rule 26    expr -> expr '
Rule 27    cond -> expr < expr
Rule 28    cond -> expr > expr
Rule 29    cond -> expr LE expr
Rule 30    cond -> expr GE expr
Rule 31    cond -> expr EQ expr
Rule 32    cond -> expr NEQ expr
Rule 33    expr -> [ lists ]
Rule 34    lists -> list
Rule 35    lists -> lists , list
Rule 36    list -> [ seq ]
Rule 37    seq -> expr
Rule 38    seq -> seq , expr
Rule 39    fun -> ZEROS
Rule 40    fun -> EYE
Rule 41    fun -> ONES
Rule 42    expr -> fun ( expr )
Rule 43    in -> WHILE ( cond ) in
Rule 44    in -> FOR ID = expr : expr in
Rule 45    in -> IF ( cond ) in
Rule 46    in -> IF ( cond ) in ELSE in
Rule 47    in -> BREAK ;
Rule 48    in -> CONTINUE ;
Rule 49    in -> RETURN expr ;
Rule 50    in -> PRINT seq ;
Rule 51    in -> ID list = expr

Terminals, with rules where they appear

'                    : 26
(                    : 25 42 43 45 46
)                    : 25 42 43 45 46
*                    : 14
+                    : 12
,                    : 35 38
-                    : 13 20
/                    : 15
:                    : 44
;                    : 5 7 8 9 10 11 47 48 49 50
<                    : 27
=                    : 7 44 51
>                    : 28
ASSIGNADD            : 8
ASSIGNDIV            : 11
ASSIGNMINUS          : 9
ASSIGNMUL            : 10
BREAK                : 47
CONTINUE             : 48
DOTADD               : 16
DOTDIVIDE            : 19
DOTMINUS             : 17
DOTTIMES             : 18
ELSE                 : 46
EQ                   : 31
EYE                  : 40
FLOATNUM             : 21
FOR                  : 44
GE                   : 30
ID                   : 7 8 9 10 11 23 44 51
IF                   : 45 46
LE                   : 29
NEQ                  : 32
NUMBER               : 22
ONES                 : 41
PRINT                : 50
RETURN               : 49
STR                  : 24
UMINUS               : 
WHILE                : 43
ZEROS                : 39
[                    : 33 36
]                    : 33 36
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

cond                 : 43 45 46
expr                 : 7 8 9 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 25 26 27 27 28 28 29 29 30 30 31 31 32 32 37 38 42 44 44 49 51
fun                  : 42
in                   : 3 4 43 44 45 46 46
ins                  : 2 3 6
ins_opt              : 1
list                 : 34 35 51
lists                : 33 35
program              : 0
seq                  : 36 38 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . ins_opt
    (2) ins_opt -> . ins
    (3) ins -> . ins in
    (4) ins -> . in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    program                        shift and go to state 1
    ins_opt                        shift and go to state 2
    ins                            shift and go to state 3
    in                             shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> ins_opt .

    $end            reduce using rule 1 (program -> ins_opt .)


state 3

    (2) ins_opt -> ins .
    (3) ins -> ins . in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    $end            reduce using rule 2 (ins_opt -> ins .)
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    in                             shift and go to state 15

state 4

    (4) ins -> in .

    ;               reduce using rule 4 (ins -> in .)
    {               reduce using rule 4 (ins -> in .)
    ID              reduce using rule 4 (ins -> in .)
    WHILE           reduce using rule 4 (ins -> in .)
    FOR             reduce using rule 4 (ins -> in .)
    IF              reduce using rule 4 (ins -> in .)
    BREAK           reduce using rule 4 (ins -> in .)
    CONTINUE        reduce using rule 4 (ins -> in .)
    RETURN          reduce using rule 4 (ins -> in .)
    PRINT           reduce using rule 4 (ins -> in .)
    $end            reduce using rule 4 (ins -> in .)
    }               reduce using rule 4 (ins -> in .)


state 5

    (5) in -> ; .

    ;               reduce using rule 5 (in -> ; .)
    {               reduce using rule 5 (in -> ; .)
    ID              reduce using rule 5 (in -> ; .)
    WHILE           reduce using rule 5 (in -> ; .)
    FOR             reduce using rule 5 (in -> ; .)
    IF              reduce using rule 5 (in -> ; .)
    BREAK           reduce using rule 5 (in -> ; .)
    CONTINUE        reduce using rule 5 (in -> ; .)
    RETURN          reduce using rule 5 (in -> ; .)
    PRINT           reduce using rule 5 (in -> ; .)
    $end            reduce using rule 5 (in -> ; .)
    }               reduce using rule 5 (in -> ; .)
    ELSE            reduce using rule 5 (in -> ; .)


state 6

    (6) in -> { . ins }
    (3) ins -> . ins in
    (4) ins -> . in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    ins                            shift and go to state 16
    in                             shift and go to state 4

state 7

    (7) in -> ID . = expr ;
    (8) in -> ID . ASSIGNADD expr ;
    (9) in -> ID . ASSIGNMINUS expr ;
    (10) in -> ID . ASSIGNMUL expr ;
    (11) in -> ID . ASSIGNDIV expr ;
    (51) in -> ID . list = expr
    (36) list -> . [ seq ]

    =               shift and go to state 17
    ASSIGNADD       shift and go to state 18
    ASSIGNMINUS     shift and go to state 19
    ASSIGNMUL       shift and go to state 20
    ASSIGNDIV       shift and go to state 21
    [               shift and go to state 23

    list                           shift and go to state 22

state 8

    (43) in -> WHILE . ( cond ) in

    (               shift and go to state 24


state 9

    (44) in -> FOR . ID = expr : expr in

    ID              shift and go to state 25


state 10

    (45) in -> IF . ( cond ) in
    (46) in -> IF . ( cond ) in ELSE in

    (               shift and go to state 26


state 11

    (47) in -> BREAK . ;

    ;               shift and go to state 27


state 12

    (48) in -> CONTINUE . ;

    ;               shift and go to state 28


state 13

    (49) in -> RETURN . expr ;
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 29
    fun                            shift and go to state 37

state 14

    (50) in -> PRINT . seq ;
    (37) seq -> . expr
    (38) seq -> . seq , expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    seq                            shift and go to state 41
    expr                           shift and go to state 42
    fun                            shift and go to state 37

state 15

    (3) ins -> ins in .

    ;               reduce using rule 3 (ins -> ins in .)
    {               reduce using rule 3 (ins -> ins in .)
    ID              reduce using rule 3 (ins -> ins in .)
    WHILE           reduce using rule 3 (ins -> ins in .)
    FOR             reduce using rule 3 (ins -> ins in .)
    IF              reduce using rule 3 (ins -> ins in .)
    BREAK           reduce using rule 3 (ins -> ins in .)
    CONTINUE        reduce using rule 3 (ins -> ins in .)
    RETURN          reduce using rule 3 (ins -> ins in .)
    PRINT           reduce using rule 3 (ins -> ins in .)
    $end            reduce using rule 3 (ins -> ins in .)
    }               reduce using rule 3 (ins -> ins in .)


state 16

    (6) in -> { ins . }
    (3) ins -> ins . in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    }               shift and go to state 43
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    in                             shift and go to state 15

state 17

    (7) in -> ID = . expr ;
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 44
    fun                            shift and go to state 37

state 18

    (8) in -> ID ASSIGNADD . expr ;
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 45
    fun                            shift and go to state 37

state 19

    (9) in -> ID ASSIGNMINUS . expr ;
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 46
    fun                            shift and go to state 37

state 20

    (10) in -> ID ASSIGNMUL . expr ;
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 47
    fun                            shift and go to state 37

state 21

    (11) in -> ID ASSIGNDIV . expr ;
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 48
    fun                            shift and go to state 37

state 22

    (51) in -> ID list . = expr

    =               shift and go to state 49


state 23

    (36) list -> [ . seq ]
    (37) seq -> . expr
    (38) seq -> . seq , expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    seq                            shift and go to state 50
    expr                           shift and go to state 42
    fun                            shift and go to state 37

state 24

    (43) in -> WHILE ( . cond ) in
    (27) cond -> . expr < expr
    (28) cond -> . expr > expr
    (29) cond -> . expr LE expr
    (30) cond -> . expr GE expr
    (31) cond -> . expr EQ expr
    (32) cond -> . expr NEQ expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    cond                           shift and go to state 51
    expr                           shift and go to state 52
    fun                            shift and go to state 37

state 25

    (44) in -> FOR ID . = expr : expr in

    =               shift and go to state 53


state 26

    (45) in -> IF ( . cond ) in
    (46) in -> IF ( . cond ) in ELSE in
    (27) cond -> . expr < expr
    (28) cond -> . expr > expr
    (29) cond -> . expr LE expr
    (30) cond -> . expr GE expr
    (31) cond -> . expr EQ expr
    (32) cond -> . expr NEQ expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    cond                           shift and go to state 54
    expr                           shift and go to state 52
    fun                            shift and go to state 37

state 27

    (47) in -> BREAK ; .

    ;               reduce using rule 47 (in -> BREAK ; .)
    {               reduce using rule 47 (in -> BREAK ; .)
    ID              reduce using rule 47 (in -> BREAK ; .)
    WHILE           reduce using rule 47 (in -> BREAK ; .)
    FOR             reduce using rule 47 (in -> BREAK ; .)
    IF              reduce using rule 47 (in -> BREAK ; .)
    BREAK           reduce using rule 47 (in -> BREAK ; .)
    CONTINUE        reduce using rule 47 (in -> BREAK ; .)
    RETURN          reduce using rule 47 (in -> BREAK ; .)
    PRINT           reduce using rule 47 (in -> BREAK ; .)
    $end            reduce using rule 47 (in -> BREAK ; .)
    }               reduce using rule 47 (in -> BREAK ; .)
    ELSE            reduce using rule 47 (in -> BREAK ; .)


state 28

    (48) in -> CONTINUE ; .

    ;               reduce using rule 48 (in -> CONTINUE ; .)
    {               reduce using rule 48 (in -> CONTINUE ; .)
    ID              reduce using rule 48 (in -> CONTINUE ; .)
    WHILE           reduce using rule 48 (in -> CONTINUE ; .)
    FOR             reduce using rule 48 (in -> CONTINUE ; .)
    IF              reduce using rule 48 (in -> CONTINUE ; .)
    BREAK           reduce using rule 48 (in -> CONTINUE ; .)
    CONTINUE        reduce using rule 48 (in -> CONTINUE ; .)
    RETURN          reduce using rule 48 (in -> CONTINUE ; .)
    PRINT           reduce using rule 48 (in -> CONTINUE ; .)
    $end            reduce using rule 48 (in -> CONTINUE ; .)
    }               reduce using rule 48 (in -> CONTINUE ; .)
    ELSE            reduce using rule 48 (in -> CONTINUE ; .)


state 29

    (49) in -> RETURN expr . ;
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               shift and go to state 55
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 30

    (20) expr -> - . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 65
    fun                            shift and go to state 37

state 31

    (21) expr -> FLOATNUM .

    ;               reduce using rule 21 (expr -> FLOATNUM .)
    +               reduce using rule 21 (expr -> FLOATNUM .)
    -               reduce using rule 21 (expr -> FLOATNUM .)
    *               reduce using rule 21 (expr -> FLOATNUM .)
    /               reduce using rule 21 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 21 (expr -> FLOATNUM .)
    DOTMINUS        reduce using rule 21 (expr -> FLOATNUM .)
    DOTTIMES        reduce using rule 21 (expr -> FLOATNUM .)
    DOTDIVIDE       reduce using rule 21 (expr -> FLOATNUM .)
    '               reduce using rule 21 (expr -> FLOATNUM .)
    ,               reduce using rule 21 (expr -> FLOATNUM .)
    ]               reduce using rule 21 (expr -> FLOATNUM .)
    <               reduce using rule 21 (expr -> FLOATNUM .)
    >               reduce using rule 21 (expr -> FLOATNUM .)
    LE              reduce using rule 21 (expr -> FLOATNUM .)
    GE              reduce using rule 21 (expr -> FLOATNUM .)
    EQ              reduce using rule 21 (expr -> FLOATNUM .)
    NEQ             reduce using rule 21 (expr -> FLOATNUM .)
    )               reduce using rule 21 (expr -> FLOATNUM .)
    {               reduce using rule 21 (expr -> FLOATNUM .)
    ID              reduce using rule 21 (expr -> FLOATNUM .)
    WHILE           reduce using rule 21 (expr -> FLOATNUM .)
    FOR             reduce using rule 21 (expr -> FLOATNUM .)
    IF              reduce using rule 21 (expr -> FLOATNUM .)
    BREAK           reduce using rule 21 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 21 (expr -> FLOATNUM .)
    RETURN          reduce using rule 21 (expr -> FLOATNUM .)
    PRINT           reduce using rule 21 (expr -> FLOATNUM .)
    $end            reduce using rule 21 (expr -> FLOATNUM .)
    }               reduce using rule 21 (expr -> FLOATNUM .)
    ELSE            reduce using rule 21 (expr -> FLOATNUM .)
    :               reduce using rule 21 (expr -> FLOATNUM .)


state 32

    (22) expr -> NUMBER .

    ;               reduce using rule 22 (expr -> NUMBER .)
    +               reduce using rule 22 (expr -> NUMBER .)
    -               reduce using rule 22 (expr -> NUMBER .)
    *               reduce using rule 22 (expr -> NUMBER .)
    /               reduce using rule 22 (expr -> NUMBER .)
    DOTADD          reduce using rule 22 (expr -> NUMBER .)
    DOTMINUS        reduce using rule 22 (expr -> NUMBER .)
    DOTTIMES        reduce using rule 22 (expr -> NUMBER .)
    DOTDIVIDE       reduce using rule 22 (expr -> NUMBER .)
    '               reduce using rule 22 (expr -> NUMBER .)
    ,               reduce using rule 22 (expr -> NUMBER .)
    ]               reduce using rule 22 (expr -> NUMBER .)
    <               reduce using rule 22 (expr -> NUMBER .)
    >               reduce using rule 22 (expr -> NUMBER .)
    LE              reduce using rule 22 (expr -> NUMBER .)
    GE              reduce using rule 22 (expr -> NUMBER .)
    EQ              reduce using rule 22 (expr -> NUMBER .)
    NEQ             reduce using rule 22 (expr -> NUMBER .)
    )               reduce using rule 22 (expr -> NUMBER .)
    {               reduce using rule 22 (expr -> NUMBER .)
    ID              reduce using rule 22 (expr -> NUMBER .)
    WHILE           reduce using rule 22 (expr -> NUMBER .)
    FOR             reduce using rule 22 (expr -> NUMBER .)
    IF              reduce using rule 22 (expr -> NUMBER .)
    BREAK           reduce using rule 22 (expr -> NUMBER .)
    CONTINUE        reduce using rule 22 (expr -> NUMBER .)
    RETURN          reduce using rule 22 (expr -> NUMBER .)
    PRINT           reduce using rule 22 (expr -> NUMBER .)
    $end            reduce using rule 22 (expr -> NUMBER .)
    }               reduce using rule 22 (expr -> NUMBER .)
    ELSE            reduce using rule 22 (expr -> NUMBER .)
    :               reduce using rule 22 (expr -> NUMBER .)


state 33

    (23) expr -> ID .

    ;               reduce using rule 23 (expr -> ID .)
    +               reduce using rule 23 (expr -> ID .)
    -               reduce using rule 23 (expr -> ID .)
    *               reduce using rule 23 (expr -> ID .)
    /               reduce using rule 23 (expr -> ID .)
    DOTADD          reduce using rule 23 (expr -> ID .)
    DOTMINUS        reduce using rule 23 (expr -> ID .)
    DOTTIMES        reduce using rule 23 (expr -> ID .)
    DOTDIVIDE       reduce using rule 23 (expr -> ID .)
    '               reduce using rule 23 (expr -> ID .)
    ,               reduce using rule 23 (expr -> ID .)
    ]               reduce using rule 23 (expr -> ID .)
    <               reduce using rule 23 (expr -> ID .)
    >               reduce using rule 23 (expr -> ID .)
    LE              reduce using rule 23 (expr -> ID .)
    GE              reduce using rule 23 (expr -> ID .)
    EQ              reduce using rule 23 (expr -> ID .)
    NEQ             reduce using rule 23 (expr -> ID .)
    )               reduce using rule 23 (expr -> ID .)
    {               reduce using rule 23 (expr -> ID .)
    ID              reduce using rule 23 (expr -> ID .)
    WHILE           reduce using rule 23 (expr -> ID .)
    FOR             reduce using rule 23 (expr -> ID .)
    IF              reduce using rule 23 (expr -> ID .)
    BREAK           reduce using rule 23 (expr -> ID .)
    CONTINUE        reduce using rule 23 (expr -> ID .)
    RETURN          reduce using rule 23 (expr -> ID .)
    PRINT           reduce using rule 23 (expr -> ID .)
    $end            reduce using rule 23 (expr -> ID .)
    }               reduce using rule 23 (expr -> ID .)
    ELSE            reduce using rule 23 (expr -> ID .)
    :               reduce using rule 23 (expr -> ID .)


state 34

    (24) expr -> STR .

    ;               reduce using rule 24 (expr -> STR .)
    +               reduce using rule 24 (expr -> STR .)
    -               reduce using rule 24 (expr -> STR .)
    *               reduce using rule 24 (expr -> STR .)
    /               reduce using rule 24 (expr -> STR .)
    DOTADD          reduce using rule 24 (expr -> STR .)
    DOTMINUS        reduce using rule 24 (expr -> STR .)
    DOTTIMES        reduce using rule 24 (expr -> STR .)
    DOTDIVIDE       reduce using rule 24 (expr -> STR .)
    '               reduce using rule 24 (expr -> STR .)
    ,               reduce using rule 24 (expr -> STR .)
    ]               reduce using rule 24 (expr -> STR .)
    <               reduce using rule 24 (expr -> STR .)
    >               reduce using rule 24 (expr -> STR .)
    LE              reduce using rule 24 (expr -> STR .)
    GE              reduce using rule 24 (expr -> STR .)
    EQ              reduce using rule 24 (expr -> STR .)
    NEQ             reduce using rule 24 (expr -> STR .)
    )               reduce using rule 24 (expr -> STR .)
    {               reduce using rule 24 (expr -> STR .)
    ID              reduce using rule 24 (expr -> STR .)
    WHILE           reduce using rule 24 (expr -> STR .)
    FOR             reduce using rule 24 (expr -> STR .)
    IF              reduce using rule 24 (expr -> STR .)
    BREAK           reduce using rule 24 (expr -> STR .)
    CONTINUE        reduce using rule 24 (expr -> STR .)
    RETURN          reduce using rule 24 (expr -> STR .)
    PRINT           reduce using rule 24 (expr -> STR .)
    $end            reduce using rule 24 (expr -> STR .)
    }               reduce using rule 24 (expr -> STR .)
    ELSE            reduce using rule 24 (expr -> STR .)
    :               reduce using rule 24 (expr -> STR .)


state 35

    (25) expr -> ( . expr )
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 66
    fun                            shift and go to state 37

state 36

    (33) expr -> [ . lists ]
    (34) lists -> . list
    (35) lists -> . lists , list
    (36) list -> . [ seq ]

    [               shift and go to state 23

    lists                          shift and go to state 67
    list                           shift and go to state 68

state 37

    (42) expr -> fun . ( expr )

    (               shift and go to state 69


state 38

    (39) fun -> ZEROS .

    (               reduce using rule 39 (fun -> ZEROS .)


state 39

    (40) fun -> EYE .

    (               reduce using rule 40 (fun -> EYE .)


state 40

    (41) fun -> ONES .

    (               reduce using rule 41 (fun -> ONES .)


state 41

    (50) in -> PRINT seq . ;
    (38) seq -> seq . , expr

    ;               shift and go to state 70
    ,               shift and go to state 71


state 42

    (37) seq -> expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 37 (seq -> expr .)
    ,               reduce using rule 37 (seq -> expr .)
    ]               reduce using rule 37 (seq -> expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 43

    (6) in -> { ins } .

    ;               reduce using rule 6 (in -> { ins } .)
    {               reduce using rule 6 (in -> { ins } .)
    ID              reduce using rule 6 (in -> { ins } .)
    WHILE           reduce using rule 6 (in -> { ins } .)
    FOR             reduce using rule 6 (in -> { ins } .)
    IF              reduce using rule 6 (in -> { ins } .)
    BREAK           reduce using rule 6 (in -> { ins } .)
    CONTINUE        reduce using rule 6 (in -> { ins } .)
    RETURN          reduce using rule 6 (in -> { ins } .)
    PRINT           reduce using rule 6 (in -> { ins } .)
    $end            reduce using rule 6 (in -> { ins } .)
    }               reduce using rule 6 (in -> { ins } .)
    ELSE            reduce using rule 6 (in -> { ins } .)


state 44

    (7) in -> ID = expr . ;
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               shift and go to state 72
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 45

    (8) in -> ID ASSIGNADD expr . ;
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               shift and go to state 73
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 46

    (9) in -> ID ASSIGNMINUS expr . ;
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               shift and go to state 74
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 47

    (10) in -> ID ASSIGNMUL expr . ;
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               shift and go to state 75
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 48

    (11) in -> ID ASSIGNDIV expr . ;
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               shift and go to state 76
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 49

    (51) in -> ID list = . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 77
    fun                            shift and go to state 37

state 50

    (36) list -> [ seq . ]
    (38) seq -> seq . , expr

    ]               shift and go to state 78
    ,               shift and go to state 71


state 51

    (43) in -> WHILE ( cond . ) in

    )               shift and go to state 79


state 52

    (27) cond -> expr . < expr
    (28) cond -> expr . > expr
    (29) cond -> expr . LE expr
    (30) cond -> expr . GE expr
    (31) cond -> expr . EQ expr
    (32) cond -> expr . NEQ expr
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    <               shift and go to state 80
    >               shift and go to state 81
    LE              shift and go to state 82
    GE              shift and go to state 83
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 53

    (44) in -> FOR ID = . expr : expr in
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 86
    fun                            shift and go to state 37

state 54

    (45) in -> IF ( cond . ) in
    (46) in -> IF ( cond . ) in ELSE in

    )               shift and go to state 87


state 55

    (49) in -> RETURN expr ; .

    ;               reduce using rule 49 (in -> RETURN expr ; .)
    {               reduce using rule 49 (in -> RETURN expr ; .)
    ID              reduce using rule 49 (in -> RETURN expr ; .)
    WHILE           reduce using rule 49 (in -> RETURN expr ; .)
    FOR             reduce using rule 49 (in -> RETURN expr ; .)
    IF              reduce using rule 49 (in -> RETURN expr ; .)
    BREAK           reduce using rule 49 (in -> RETURN expr ; .)
    CONTINUE        reduce using rule 49 (in -> RETURN expr ; .)
    RETURN          reduce using rule 49 (in -> RETURN expr ; .)
    PRINT           reduce using rule 49 (in -> RETURN expr ; .)
    $end            reduce using rule 49 (in -> RETURN expr ; .)
    }               reduce using rule 49 (in -> RETURN expr ; .)
    ELSE            reduce using rule 49 (in -> RETURN expr ; .)


state 56

    (12) expr -> expr + . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 88
    fun                            shift and go to state 37

state 57

    (13) expr -> expr - . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 89
    fun                            shift and go to state 37

state 58

    (14) expr -> expr * . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 90
    fun                            shift and go to state 37

state 59

    (15) expr -> expr / . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 91
    fun                            shift and go to state 37

state 60

    (16) expr -> expr DOTADD . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 92
    fun                            shift and go to state 37

state 61

    (17) expr -> expr DOTMINUS . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 93
    fun                            shift and go to state 37

state 62

    (18) expr -> expr DOTTIMES . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 94
    fun                            shift and go to state 37

state 63

    (19) expr -> expr DOTDIVIDE . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 95
    fun                            shift and go to state 37

state 64

    (26) expr -> expr ' .

    ;               reduce using rule 26 (expr -> expr ' .)
    +               reduce using rule 26 (expr -> expr ' .)
    -               reduce using rule 26 (expr -> expr ' .)
    *               reduce using rule 26 (expr -> expr ' .)
    /               reduce using rule 26 (expr -> expr ' .)
    DOTADD          reduce using rule 26 (expr -> expr ' .)
    DOTMINUS        reduce using rule 26 (expr -> expr ' .)
    DOTTIMES        reduce using rule 26 (expr -> expr ' .)
    DOTDIVIDE       reduce using rule 26 (expr -> expr ' .)
    '               reduce using rule 26 (expr -> expr ' .)
    ,               reduce using rule 26 (expr -> expr ' .)
    ]               reduce using rule 26 (expr -> expr ' .)
    <               reduce using rule 26 (expr -> expr ' .)
    >               reduce using rule 26 (expr -> expr ' .)
    LE              reduce using rule 26 (expr -> expr ' .)
    GE              reduce using rule 26 (expr -> expr ' .)
    EQ              reduce using rule 26 (expr -> expr ' .)
    NEQ             reduce using rule 26 (expr -> expr ' .)
    )               reduce using rule 26 (expr -> expr ' .)
    {               reduce using rule 26 (expr -> expr ' .)
    ID              reduce using rule 26 (expr -> expr ' .)
    WHILE           reduce using rule 26 (expr -> expr ' .)
    FOR             reduce using rule 26 (expr -> expr ' .)
    IF              reduce using rule 26 (expr -> expr ' .)
    BREAK           reduce using rule 26 (expr -> expr ' .)
    CONTINUE        reduce using rule 26 (expr -> expr ' .)
    RETURN          reduce using rule 26 (expr -> expr ' .)
    PRINT           reduce using rule 26 (expr -> expr ' .)
    $end            reduce using rule 26 (expr -> expr ' .)
    }               reduce using rule 26 (expr -> expr ' .)
    ELSE            reduce using rule 26 (expr -> expr ' .)
    :               reduce using rule 26 (expr -> expr ' .)


state 65

    (20) expr -> - expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 20 (expr -> - expr .)
    +               reduce using rule 20 (expr -> - expr .)
    -               reduce using rule 20 (expr -> - expr .)
    *               reduce using rule 20 (expr -> - expr .)
    /               reduce using rule 20 (expr -> - expr .)
    DOTADD          reduce using rule 20 (expr -> - expr .)
    DOTMINUS        reduce using rule 20 (expr -> - expr .)
    DOTTIMES        reduce using rule 20 (expr -> - expr .)
    DOTDIVIDE       reduce using rule 20 (expr -> - expr .)
    ,               reduce using rule 20 (expr -> - expr .)
    ]               reduce using rule 20 (expr -> - expr .)
    <               reduce using rule 20 (expr -> - expr .)
    >               reduce using rule 20 (expr -> - expr .)
    LE              reduce using rule 20 (expr -> - expr .)
    GE              reduce using rule 20 (expr -> - expr .)
    EQ              reduce using rule 20 (expr -> - expr .)
    NEQ             reduce using rule 20 (expr -> - expr .)
    )               reduce using rule 20 (expr -> - expr .)
    {               reduce using rule 20 (expr -> - expr .)
    ID              reduce using rule 20 (expr -> - expr .)
    WHILE           reduce using rule 20 (expr -> - expr .)
    FOR             reduce using rule 20 (expr -> - expr .)
    IF              reduce using rule 20 (expr -> - expr .)
    BREAK           reduce using rule 20 (expr -> - expr .)
    CONTINUE        reduce using rule 20 (expr -> - expr .)
    RETURN          reduce using rule 20 (expr -> - expr .)
    PRINT           reduce using rule 20 (expr -> - expr .)
    $end            reduce using rule 20 (expr -> - expr .)
    }               reduce using rule 20 (expr -> - expr .)
    ELSE            reduce using rule 20 (expr -> - expr .)
    :               reduce using rule 20 (expr -> - expr .)
    '               shift and go to state 64

  ! '               [ reduce using rule 20 (expr -> - expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTMINUS        [ shift and go to state 61 ]
  ! DOTTIMES        [ shift and go to state 62 ]
  ! DOTDIVIDE       [ shift and go to state 63 ]


state 66

    (25) expr -> ( expr . )
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               shift and go to state 96
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 67

    (33) expr -> [ lists . ]
    (35) lists -> lists . , list

    ]               shift and go to state 97
    ,               shift and go to state 98


state 68

    (34) lists -> list .

    ]               reduce using rule 34 (lists -> list .)
    ,               reduce using rule 34 (lists -> list .)


state 69

    (42) expr -> fun ( . expr )
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    fun                            shift and go to state 37
    expr                           shift and go to state 99

state 70

    (50) in -> PRINT seq ; .

    ;               reduce using rule 50 (in -> PRINT seq ; .)
    {               reduce using rule 50 (in -> PRINT seq ; .)
    ID              reduce using rule 50 (in -> PRINT seq ; .)
    WHILE           reduce using rule 50 (in -> PRINT seq ; .)
    FOR             reduce using rule 50 (in -> PRINT seq ; .)
    IF              reduce using rule 50 (in -> PRINT seq ; .)
    BREAK           reduce using rule 50 (in -> PRINT seq ; .)
    CONTINUE        reduce using rule 50 (in -> PRINT seq ; .)
    RETURN          reduce using rule 50 (in -> PRINT seq ; .)
    PRINT           reduce using rule 50 (in -> PRINT seq ; .)
    $end            reduce using rule 50 (in -> PRINT seq ; .)
    }               reduce using rule 50 (in -> PRINT seq ; .)
    ELSE            reduce using rule 50 (in -> PRINT seq ; .)


state 71

    (38) seq -> seq , . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 100
    fun                            shift and go to state 37

state 72

    (7) in -> ID = expr ; .

    ;               reduce using rule 7 (in -> ID = expr ; .)
    {               reduce using rule 7 (in -> ID = expr ; .)
    ID              reduce using rule 7 (in -> ID = expr ; .)
    WHILE           reduce using rule 7 (in -> ID = expr ; .)
    FOR             reduce using rule 7 (in -> ID = expr ; .)
    IF              reduce using rule 7 (in -> ID = expr ; .)
    BREAK           reduce using rule 7 (in -> ID = expr ; .)
    CONTINUE        reduce using rule 7 (in -> ID = expr ; .)
    RETURN          reduce using rule 7 (in -> ID = expr ; .)
    PRINT           reduce using rule 7 (in -> ID = expr ; .)
    $end            reduce using rule 7 (in -> ID = expr ; .)
    }               reduce using rule 7 (in -> ID = expr ; .)
    ELSE            reduce using rule 7 (in -> ID = expr ; .)


state 73

    (8) in -> ID ASSIGNADD expr ; .

    ;               reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    {               reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    ID              reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    WHILE           reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    FOR             reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    IF              reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    BREAK           reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    CONTINUE        reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    RETURN          reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    PRINT           reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    $end            reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    }               reduce using rule 8 (in -> ID ASSIGNADD expr ; .)
    ELSE            reduce using rule 8 (in -> ID ASSIGNADD expr ; .)


state 74

    (9) in -> ID ASSIGNMINUS expr ; .

    ;               reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    {               reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    ID              reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    WHILE           reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    FOR             reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    IF              reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    BREAK           reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    CONTINUE        reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    RETURN          reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    PRINT           reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    $end            reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    }               reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)
    ELSE            reduce using rule 9 (in -> ID ASSIGNMINUS expr ; .)


state 75

    (10) in -> ID ASSIGNMUL expr ; .

    ;               reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    {               reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    ID              reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    WHILE           reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    FOR             reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    IF              reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    BREAK           reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    CONTINUE        reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    RETURN          reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    PRINT           reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    $end            reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    }               reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)
    ELSE            reduce using rule 10 (in -> ID ASSIGNMUL expr ; .)


state 76

    (11) in -> ID ASSIGNDIV expr ; .

    ;               reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    {               reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    ID              reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    WHILE           reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    FOR             reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    IF              reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    BREAK           reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    CONTINUE        reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    RETURN          reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    PRINT           reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    $end            reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    }               reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)
    ELSE            reduce using rule 11 (in -> ID ASSIGNDIV expr ; .)


state 77

    (51) in -> ID list = expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 51 (in -> ID list = expr .)
    {               reduce using rule 51 (in -> ID list = expr .)
    ID              reduce using rule 51 (in -> ID list = expr .)
    WHILE           reduce using rule 51 (in -> ID list = expr .)
    FOR             reduce using rule 51 (in -> ID list = expr .)
    IF              reduce using rule 51 (in -> ID list = expr .)
    BREAK           reduce using rule 51 (in -> ID list = expr .)
    CONTINUE        reduce using rule 51 (in -> ID list = expr .)
    RETURN          reduce using rule 51 (in -> ID list = expr .)
    PRINT           reduce using rule 51 (in -> ID list = expr .)
    $end            reduce using rule 51 (in -> ID list = expr .)
    }               reduce using rule 51 (in -> ID list = expr .)
    ELSE            reduce using rule 51 (in -> ID list = expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 78

    (36) list -> [ seq ] .

    =               reduce using rule 36 (list -> [ seq ] .)
    ]               reduce using rule 36 (list -> [ seq ] .)
    ,               reduce using rule 36 (list -> [ seq ] .)


state 79

    (43) in -> WHILE ( cond ) . in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    in                             shift and go to state 101

state 80

    (27) cond -> expr < . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 102
    fun                            shift and go to state 37

state 81

    (28) cond -> expr > . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 103
    fun                            shift and go to state 37

state 82

    (29) cond -> expr LE . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 104
    fun                            shift and go to state 37

state 83

    (30) cond -> expr GE . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 105
    fun                            shift and go to state 37

state 84

    (31) cond -> expr EQ . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 106
    fun                            shift and go to state 37

state 85

    (32) cond -> expr NEQ . expr
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 107
    fun                            shift and go to state 37

state 86

    (44) in -> FOR ID = expr . : expr in
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    :               shift and go to state 108
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 87

    (45) in -> IF ( cond ) . in
    (46) in -> IF ( cond ) . in ELSE in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    in                             shift and go to state 109

state 88

    (12) expr -> expr + expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 12 (expr -> expr + expr .)
    +               reduce using rule 12 (expr -> expr + expr .)
    -               reduce using rule 12 (expr -> expr + expr .)
    ,               reduce using rule 12 (expr -> expr + expr .)
    ]               reduce using rule 12 (expr -> expr + expr .)
    <               reduce using rule 12 (expr -> expr + expr .)
    >               reduce using rule 12 (expr -> expr + expr .)
    LE              reduce using rule 12 (expr -> expr + expr .)
    GE              reduce using rule 12 (expr -> expr + expr .)
    EQ              reduce using rule 12 (expr -> expr + expr .)
    NEQ             reduce using rule 12 (expr -> expr + expr .)
    )               reduce using rule 12 (expr -> expr + expr .)
    {               reduce using rule 12 (expr -> expr + expr .)
    ID              reduce using rule 12 (expr -> expr + expr .)
    WHILE           reduce using rule 12 (expr -> expr + expr .)
    FOR             reduce using rule 12 (expr -> expr + expr .)
    IF              reduce using rule 12 (expr -> expr + expr .)
    BREAK           reduce using rule 12 (expr -> expr + expr .)
    CONTINUE        reduce using rule 12 (expr -> expr + expr .)
    RETURN          reduce using rule 12 (expr -> expr + expr .)
    PRINT           reduce using rule 12 (expr -> expr + expr .)
    $end            reduce using rule 12 (expr -> expr + expr .)
    }               reduce using rule 12 (expr -> expr + expr .)
    ELSE            reduce using rule 12 (expr -> expr + expr .)
    :               reduce using rule 12 (expr -> expr + expr .)
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64

  ! *               [ reduce using rule 12 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 12 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 12 (expr -> expr + expr .) ]
  ! DOTMINUS        [ reduce using rule 12 (expr -> expr + expr .) ]
  ! DOTTIMES        [ reduce using rule 12 (expr -> expr + expr .) ]
  ! DOTDIVIDE       [ reduce using rule 12 (expr -> expr + expr .) ]
  ! '               [ reduce using rule 12 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]


state 89

    (13) expr -> expr - expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 13 (expr -> expr - expr .)
    +               reduce using rule 13 (expr -> expr - expr .)
    -               reduce using rule 13 (expr -> expr - expr .)
    ,               reduce using rule 13 (expr -> expr - expr .)
    ]               reduce using rule 13 (expr -> expr - expr .)
    <               reduce using rule 13 (expr -> expr - expr .)
    >               reduce using rule 13 (expr -> expr - expr .)
    LE              reduce using rule 13 (expr -> expr - expr .)
    GE              reduce using rule 13 (expr -> expr - expr .)
    EQ              reduce using rule 13 (expr -> expr - expr .)
    NEQ             reduce using rule 13 (expr -> expr - expr .)
    )               reduce using rule 13 (expr -> expr - expr .)
    {               reduce using rule 13 (expr -> expr - expr .)
    ID              reduce using rule 13 (expr -> expr - expr .)
    WHILE           reduce using rule 13 (expr -> expr - expr .)
    FOR             reduce using rule 13 (expr -> expr - expr .)
    IF              reduce using rule 13 (expr -> expr - expr .)
    BREAK           reduce using rule 13 (expr -> expr - expr .)
    CONTINUE        reduce using rule 13 (expr -> expr - expr .)
    RETURN          reduce using rule 13 (expr -> expr - expr .)
    PRINT           reduce using rule 13 (expr -> expr - expr .)
    $end            reduce using rule 13 (expr -> expr - expr .)
    }               reduce using rule 13 (expr -> expr - expr .)
    ELSE            reduce using rule 13 (expr -> expr - expr .)
    :               reduce using rule 13 (expr -> expr - expr .)
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64

  ! *               [ reduce using rule 13 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 13 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 13 (expr -> expr - expr .) ]
  ! DOTMINUS        [ reduce using rule 13 (expr -> expr - expr .) ]
  ! DOTTIMES        [ reduce using rule 13 (expr -> expr - expr .) ]
  ! DOTDIVIDE       [ reduce using rule 13 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 13 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]


state 90

    (14) expr -> expr * expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 14 (expr -> expr * expr .)
    +               reduce using rule 14 (expr -> expr * expr .)
    -               reduce using rule 14 (expr -> expr * expr .)
    *               reduce using rule 14 (expr -> expr * expr .)
    /               reduce using rule 14 (expr -> expr * expr .)
    ,               reduce using rule 14 (expr -> expr * expr .)
    ]               reduce using rule 14 (expr -> expr * expr .)
    <               reduce using rule 14 (expr -> expr * expr .)
    >               reduce using rule 14 (expr -> expr * expr .)
    LE              reduce using rule 14 (expr -> expr * expr .)
    GE              reduce using rule 14 (expr -> expr * expr .)
    EQ              reduce using rule 14 (expr -> expr * expr .)
    NEQ             reduce using rule 14 (expr -> expr * expr .)
    )               reduce using rule 14 (expr -> expr * expr .)
    {               reduce using rule 14 (expr -> expr * expr .)
    ID              reduce using rule 14 (expr -> expr * expr .)
    WHILE           reduce using rule 14 (expr -> expr * expr .)
    FOR             reduce using rule 14 (expr -> expr * expr .)
    IF              reduce using rule 14 (expr -> expr * expr .)
    BREAK           reduce using rule 14 (expr -> expr * expr .)
    CONTINUE        reduce using rule 14 (expr -> expr * expr .)
    RETURN          reduce using rule 14 (expr -> expr * expr .)
    PRINT           reduce using rule 14 (expr -> expr * expr .)
    $end            reduce using rule 14 (expr -> expr * expr .)
    }               reduce using rule 14 (expr -> expr * expr .)
    ELSE            reduce using rule 14 (expr -> expr * expr .)
    :               reduce using rule 14 (expr -> expr * expr .)
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64

  ! DOTADD          [ reduce using rule 14 (expr -> expr * expr .) ]
  ! DOTMINUS        [ reduce using rule 14 (expr -> expr * expr .) ]
  ! DOTTIMES        [ reduce using rule 14 (expr -> expr * expr .) ]
  ! DOTDIVIDE       [ reduce using rule 14 (expr -> expr * expr .) ]
  ! '               [ reduce using rule 14 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]


state 91

    (15) expr -> expr / expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 15 (expr -> expr / expr .)
    +               reduce using rule 15 (expr -> expr / expr .)
    -               reduce using rule 15 (expr -> expr / expr .)
    *               reduce using rule 15 (expr -> expr / expr .)
    /               reduce using rule 15 (expr -> expr / expr .)
    ,               reduce using rule 15 (expr -> expr / expr .)
    ]               reduce using rule 15 (expr -> expr / expr .)
    <               reduce using rule 15 (expr -> expr / expr .)
    >               reduce using rule 15 (expr -> expr / expr .)
    LE              reduce using rule 15 (expr -> expr / expr .)
    GE              reduce using rule 15 (expr -> expr / expr .)
    EQ              reduce using rule 15 (expr -> expr / expr .)
    NEQ             reduce using rule 15 (expr -> expr / expr .)
    )               reduce using rule 15 (expr -> expr / expr .)
    {               reduce using rule 15 (expr -> expr / expr .)
    ID              reduce using rule 15 (expr -> expr / expr .)
    WHILE           reduce using rule 15 (expr -> expr / expr .)
    FOR             reduce using rule 15 (expr -> expr / expr .)
    IF              reduce using rule 15 (expr -> expr / expr .)
    BREAK           reduce using rule 15 (expr -> expr / expr .)
    CONTINUE        reduce using rule 15 (expr -> expr / expr .)
    RETURN          reduce using rule 15 (expr -> expr / expr .)
    PRINT           reduce using rule 15 (expr -> expr / expr .)
    $end            reduce using rule 15 (expr -> expr / expr .)
    }               reduce using rule 15 (expr -> expr / expr .)
    ELSE            reduce using rule 15 (expr -> expr / expr .)
    :               reduce using rule 15 (expr -> expr / expr .)
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64

  ! DOTADD          [ reduce using rule 15 (expr -> expr / expr .) ]
  ! DOTMINUS        [ reduce using rule 15 (expr -> expr / expr .) ]
  ! DOTTIMES        [ reduce using rule 15 (expr -> expr / expr .) ]
  ! DOTDIVIDE       [ reduce using rule 15 (expr -> expr / expr .) ]
  ! '               [ reduce using rule 15 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]


state 92

    (16) expr -> expr DOTADD expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 16 (expr -> expr DOTADD expr .)
    +               reduce using rule 16 (expr -> expr DOTADD expr .)
    -               reduce using rule 16 (expr -> expr DOTADD expr .)
    *               reduce using rule 16 (expr -> expr DOTADD expr .)
    /               reduce using rule 16 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 16 (expr -> expr DOTADD expr .)
    DOTMINUS        reduce using rule 16 (expr -> expr DOTADD expr .)
    ,               reduce using rule 16 (expr -> expr DOTADD expr .)
    ]               reduce using rule 16 (expr -> expr DOTADD expr .)
    <               reduce using rule 16 (expr -> expr DOTADD expr .)
    >               reduce using rule 16 (expr -> expr DOTADD expr .)
    LE              reduce using rule 16 (expr -> expr DOTADD expr .)
    GE              reduce using rule 16 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 16 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 16 (expr -> expr DOTADD expr .)
    )               reduce using rule 16 (expr -> expr DOTADD expr .)
    {               reduce using rule 16 (expr -> expr DOTADD expr .)
    ID              reduce using rule 16 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 16 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 16 (expr -> expr DOTADD expr .)
    IF              reduce using rule 16 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 16 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 16 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 16 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 16 (expr -> expr DOTADD expr .)
    $end            reduce using rule 16 (expr -> expr DOTADD expr .)
    }               reduce using rule 16 (expr -> expr DOTADD expr .)
    ELSE            reduce using rule 16 (expr -> expr DOTADD expr .)
    :               reduce using rule 16 (expr -> expr DOTADD expr .)
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64

  ! DOTTIMES        [ reduce using rule 16 (expr -> expr DOTADD expr .) ]
  ! DOTDIVIDE       [ reduce using rule 16 (expr -> expr DOTADD expr .) ]
  ! '               [ reduce using rule 16 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTMINUS        [ shift and go to state 61 ]


state 93

    (17) expr -> expr DOTMINUS expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    +               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    -               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    *               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    /               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    DOTADD          reduce using rule 17 (expr -> expr DOTMINUS expr .)
    DOTMINUS        reduce using rule 17 (expr -> expr DOTMINUS expr .)
    ,               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    ]               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    <               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    >               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    LE              reduce using rule 17 (expr -> expr DOTMINUS expr .)
    GE              reduce using rule 17 (expr -> expr DOTMINUS expr .)
    EQ              reduce using rule 17 (expr -> expr DOTMINUS expr .)
    NEQ             reduce using rule 17 (expr -> expr DOTMINUS expr .)
    )               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    {               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    ID              reduce using rule 17 (expr -> expr DOTMINUS expr .)
    WHILE           reduce using rule 17 (expr -> expr DOTMINUS expr .)
    FOR             reduce using rule 17 (expr -> expr DOTMINUS expr .)
    IF              reduce using rule 17 (expr -> expr DOTMINUS expr .)
    BREAK           reduce using rule 17 (expr -> expr DOTMINUS expr .)
    CONTINUE        reduce using rule 17 (expr -> expr DOTMINUS expr .)
    RETURN          reduce using rule 17 (expr -> expr DOTMINUS expr .)
    PRINT           reduce using rule 17 (expr -> expr DOTMINUS expr .)
    $end            reduce using rule 17 (expr -> expr DOTMINUS expr .)
    }               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    ELSE            reduce using rule 17 (expr -> expr DOTMINUS expr .)
    :               reduce using rule 17 (expr -> expr DOTMINUS expr .)
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64

  ! DOTTIMES        [ reduce using rule 17 (expr -> expr DOTMINUS expr .) ]
  ! DOTDIVIDE       [ reduce using rule 17 (expr -> expr DOTMINUS expr .) ]
  ! '               [ reduce using rule 17 (expr -> expr DOTMINUS expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTMINUS        [ shift and go to state 61 ]


state 94

    (18) expr -> expr DOTTIMES expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    +               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    -               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    *               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    /               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    DOTADD          reduce using rule 18 (expr -> expr DOTTIMES expr .)
    DOTMINUS        reduce using rule 18 (expr -> expr DOTTIMES expr .)
    DOTTIMES        reduce using rule 18 (expr -> expr DOTTIMES expr .)
    DOTDIVIDE       reduce using rule 18 (expr -> expr DOTTIMES expr .)
    ,               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    ]               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    <               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    >               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    LE              reduce using rule 18 (expr -> expr DOTTIMES expr .)
    GE              reduce using rule 18 (expr -> expr DOTTIMES expr .)
    EQ              reduce using rule 18 (expr -> expr DOTTIMES expr .)
    NEQ             reduce using rule 18 (expr -> expr DOTTIMES expr .)
    )               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    {               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    ID              reduce using rule 18 (expr -> expr DOTTIMES expr .)
    WHILE           reduce using rule 18 (expr -> expr DOTTIMES expr .)
    FOR             reduce using rule 18 (expr -> expr DOTTIMES expr .)
    IF              reduce using rule 18 (expr -> expr DOTTIMES expr .)
    BREAK           reduce using rule 18 (expr -> expr DOTTIMES expr .)
    CONTINUE        reduce using rule 18 (expr -> expr DOTTIMES expr .)
    RETURN          reduce using rule 18 (expr -> expr DOTTIMES expr .)
    PRINT           reduce using rule 18 (expr -> expr DOTTIMES expr .)
    $end            reduce using rule 18 (expr -> expr DOTTIMES expr .)
    }               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    ELSE            reduce using rule 18 (expr -> expr DOTTIMES expr .)
    :               reduce using rule 18 (expr -> expr DOTTIMES expr .)
    '               shift and go to state 64

  ! '               [ reduce using rule 18 (expr -> expr DOTTIMES expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTMINUS        [ shift and go to state 61 ]
  ! DOTTIMES        [ shift and go to state 62 ]
  ! DOTDIVIDE       [ shift and go to state 63 ]


state 95

    (19) expr -> expr DOTDIVIDE expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    +               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    -               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    *               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    /               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    DOTADD          reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    DOTMINUS        reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    DOTTIMES        reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    DOTDIVIDE       reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    ,               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    ]               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    <               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    >               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    LE              reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    GE              reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    EQ              reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    NEQ             reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    )               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    {               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    ID              reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    WHILE           reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    FOR             reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    IF              reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    BREAK           reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    CONTINUE        reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    RETURN          reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    PRINT           reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    $end            reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    }               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    ELSE            reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    :               reduce using rule 19 (expr -> expr DOTDIVIDE expr .)
    '               shift and go to state 64

  ! '               [ reduce using rule 19 (expr -> expr DOTDIVIDE expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTMINUS        [ shift and go to state 61 ]
  ! DOTTIMES        [ shift and go to state 62 ]
  ! DOTDIVIDE       [ shift and go to state 63 ]


state 96

    (25) expr -> ( expr ) .

    ;               reduce using rule 25 (expr -> ( expr ) .)
    +               reduce using rule 25 (expr -> ( expr ) .)
    -               reduce using rule 25 (expr -> ( expr ) .)
    *               reduce using rule 25 (expr -> ( expr ) .)
    /               reduce using rule 25 (expr -> ( expr ) .)
    DOTADD          reduce using rule 25 (expr -> ( expr ) .)
    DOTMINUS        reduce using rule 25 (expr -> ( expr ) .)
    DOTTIMES        reduce using rule 25 (expr -> ( expr ) .)
    DOTDIVIDE       reduce using rule 25 (expr -> ( expr ) .)
    '               reduce using rule 25 (expr -> ( expr ) .)
    ,               reduce using rule 25 (expr -> ( expr ) .)
    ]               reduce using rule 25 (expr -> ( expr ) .)
    <               reduce using rule 25 (expr -> ( expr ) .)
    >               reduce using rule 25 (expr -> ( expr ) .)
    LE              reduce using rule 25 (expr -> ( expr ) .)
    GE              reduce using rule 25 (expr -> ( expr ) .)
    EQ              reduce using rule 25 (expr -> ( expr ) .)
    NEQ             reduce using rule 25 (expr -> ( expr ) .)
    )               reduce using rule 25 (expr -> ( expr ) .)
    {               reduce using rule 25 (expr -> ( expr ) .)
    ID              reduce using rule 25 (expr -> ( expr ) .)
    WHILE           reduce using rule 25 (expr -> ( expr ) .)
    FOR             reduce using rule 25 (expr -> ( expr ) .)
    IF              reduce using rule 25 (expr -> ( expr ) .)
    BREAK           reduce using rule 25 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 25 (expr -> ( expr ) .)
    RETURN          reduce using rule 25 (expr -> ( expr ) .)
    PRINT           reduce using rule 25 (expr -> ( expr ) .)
    $end            reduce using rule 25 (expr -> ( expr ) .)
    }               reduce using rule 25 (expr -> ( expr ) .)
    ELSE            reduce using rule 25 (expr -> ( expr ) .)
    :               reduce using rule 25 (expr -> ( expr ) .)


state 97

    (33) expr -> [ lists ] .

    ;               reduce using rule 33 (expr -> [ lists ] .)
    +               reduce using rule 33 (expr -> [ lists ] .)
    -               reduce using rule 33 (expr -> [ lists ] .)
    *               reduce using rule 33 (expr -> [ lists ] .)
    /               reduce using rule 33 (expr -> [ lists ] .)
    DOTADD          reduce using rule 33 (expr -> [ lists ] .)
    DOTMINUS        reduce using rule 33 (expr -> [ lists ] .)
    DOTTIMES        reduce using rule 33 (expr -> [ lists ] .)
    DOTDIVIDE       reduce using rule 33 (expr -> [ lists ] .)
    '               reduce using rule 33 (expr -> [ lists ] .)
    ,               reduce using rule 33 (expr -> [ lists ] .)
    ]               reduce using rule 33 (expr -> [ lists ] .)
    <               reduce using rule 33 (expr -> [ lists ] .)
    >               reduce using rule 33 (expr -> [ lists ] .)
    LE              reduce using rule 33 (expr -> [ lists ] .)
    GE              reduce using rule 33 (expr -> [ lists ] .)
    EQ              reduce using rule 33 (expr -> [ lists ] .)
    NEQ             reduce using rule 33 (expr -> [ lists ] .)
    )               reduce using rule 33 (expr -> [ lists ] .)
    {               reduce using rule 33 (expr -> [ lists ] .)
    ID              reduce using rule 33 (expr -> [ lists ] .)
    WHILE           reduce using rule 33 (expr -> [ lists ] .)
    FOR             reduce using rule 33 (expr -> [ lists ] .)
    IF              reduce using rule 33 (expr -> [ lists ] .)
    BREAK           reduce using rule 33 (expr -> [ lists ] .)
    CONTINUE        reduce using rule 33 (expr -> [ lists ] .)
    RETURN          reduce using rule 33 (expr -> [ lists ] .)
    PRINT           reduce using rule 33 (expr -> [ lists ] .)
    $end            reduce using rule 33 (expr -> [ lists ] .)
    }               reduce using rule 33 (expr -> [ lists ] .)
    ELSE            reduce using rule 33 (expr -> [ lists ] .)
    :               reduce using rule 33 (expr -> [ lists ] .)


state 98

    (35) lists -> lists , . list
    (36) list -> . [ seq ]

    [               shift and go to state 23

    list                           shift and go to state 110

state 99

    (42) expr -> fun ( expr . )
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               shift and go to state 111
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 100

    (38) seq -> seq , expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    ;               reduce using rule 38 (seq -> seq , expr .)
    ,               reduce using rule 38 (seq -> seq , expr .)
    ]               reduce using rule 38 (seq -> seq , expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 101

    (43) in -> WHILE ( cond ) in .

    ;               reduce using rule 43 (in -> WHILE ( cond ) in .)
    {               reduce using rule 43 (in -> WHILE ( cond ) in .)
    ID              reduce using rule 43 (in -> WHILE ( cond ) in .)
    WHILE           reduce using rule 43 (in -> WHILE ( cond ) in .)
    FOR             reduce using rule 43 (in -> WHILE ( cond ) in .)
    IF              reduce using rule 43 (in -> WHILE ( cond ) in .)
    BREAK           reduce using rule 43 (in -> WHILE ( cond ) in .)
    CONTINUE        reduce using rule 43 (in -> WHILE ( cond ) in .)
    RETURN          reduce using rule 43 (in -> WHILE ( cond ) in .)
    PRINT           reduce using rule 43 (in -> WHILE ( cond ) in .)
    $end            reduce using rule 43 (in -> WHILE ( cond ) in .)
    }               reduce using rule 43 (in -> WHILE ( cond ) in .)
    ELSE            reduce using rule 43 (in -> WHILE ( cond ) in .)


state 102

    (27) cond -> expr < expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               reduce using rule 27 (cond -> expr < expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 103

    (28) cond -> expr > expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               reduce using rule 28 (cond -> expr > expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 104

    (29) cond -> expr LE expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               reduce using rule 29 (cond -> expr LE expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 105

    (30) cond -> expr GE expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               reduce using rule 30 (cond -> expr GE expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 106

    (31) cond -> expr EQ expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               reduce using rule 31 (cond -> expr EQ expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 107

    (32) cond -> expr NEQ expr .
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '

    )               reduce using rule 32 (cond -> expr NEQ expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64


state 108

    (44) in -> FOR ID = expr : . expr in
    (12) expr -> . expr + expr
    (13) expr -> . expr - expr
    (14) expr -> . expr * expr
    (15) expr -> . expr / expr
    (16) expr -> . expr DOTADD expr
    (17) expr -> . expr DOTMINUS expr
    (18) expr -> . expr DOTTIMES expr
    (19) expr -> . expr DOTDIVIDE expr
    (20) expr -> . - expr
    (21) expr -> . FLOATNUM
    (22) expr -> . NUMBER
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . expr '
    (33) expr -> . [ lists ]
    (42) expr -> . fun ( expr )
    (39) fun -> . ZEROS
    (40) fun -> . EYE
    (41) fun -> . ONES

    -               shift and go to state 30
    FLOATNUM        shift and go to state 31
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 112
    fun                            shift and go to state 37

state 109

    (45) in -> IF ( cond ) in .
    (46) in -> IF ( cond ) in . ELSE in

    ;               reduce using rule 45 (in -> IF ( cond ) in .)
    {               reduce using rule 45 (in -> IF ( cond ) in .)
    ID              reduce using rule 45 (in -> IF ( cond ) in .)
    WHILE           reduce using rule 45 (in -> IF ( cond ) in .)
    FOR             reduce using rule 45 (in -> IF ( cond ) in .)
    IF              reduce using rule 45 (in -> IF ( cond ) in .)
    BREAK           reduce using rule 45 (in -> IF ( cond ) in .)
    CONTINUE        reduce using rule 45 (in -> IF ( cond ) in .)
    RETURN          reduce using rule 45 (in -> IF ( cond ) in .)
    PRINT           reduce using rule 45 (in -> IF ( cond ) in .)
    $end            reduce using rule 45 (in -> IF ( cond ) in .)
    }               reduce using rule 45 (in -> IF ( cond ) in .)
    ELSE            shift and go to state 113

  ! ELSE            [ reduce using rule 45 (in -> IF ( cond ) in .) ]


state 110

    (35) lists -> lists , list .

    ]               reduce using rule 35 (lists -> lists , list .)
    ,               reduce using rule 35 (lists -> lists , list .)


state 111

    (42) expr -> fun ( expr ) .

    ;               reduce using rule 42 (expr -> fun ( expr ) .)
    +               reduce using rule 42 (expr -> fun ( expr ) .)
    -               reduce using rule 42 (expr -> fun ( expr ) .)
    *               reduce using rule 42 (expr -> fun ( expr ) .)
    /               reduce using rule 42 (expr -> fun ( expr ) .)
    DOTADD          reduce using rule 42 (expr -> fun ( expr ) .)
    DOTMINUS        reduce using rule 42 (expr -> fun ( expr ) .)
    DOTTIMES        reduce using rule 42 (expr -> fun ( expr ) .)
    DOTDIVIDE       reduce using rule 42 (expr -> fun ( expr ) .)
    '               reduce using rule 42 (expr -> fun ( expr ) .)
    ,               reduce using rule 42 (expr -> fun ( expr ) .)
    ]               reduce using rule 42 (expr -> fun ( expr ) .)
    <               reduce using rule 42 (expr -> fun ( expr ) .)
    >               reduce using rule 42 (expr -> fun ( expr ) .)
    LE              reduce using rule 42 (expr -> fun ( expr ) .)
    GE              reduce using rule 42 (expr -> fun ( expr ) .)
    EQ              reduce using rule 42 (expr -> fun ( expr ) .)
    NEQ             reduce using rule 42 (expr -> fun ( expr ) .)
    )               reduce using rule 42 (expr -> fun ( expr ) .)
    {               reduce using rule 42 (expr -> fun ( expr ) .)
    ID              reduce using rule 42 (expr -> fun ( expr ) .)
    WHILE           reduce using rule 42 (expr -> fun ( expr ) .)
    FOR             reduce using rule 42 (expr -> fun ( expr ) .)
    IF              reduce using rule 42 (expr -> fun ( expr ) .)
    BREAK           reduce using rule 42 (expr -> fun ( expr ) .)
    CONTINUE        reduce using rule 42 (expr -> fun ( expr ) .)
    RETURN          reduce using rule 42 (expr -> fun ( expr ) .)
    PRINT           reduce using rule 42 (expr -> fun ( expr ) .)
    $end            reduce using rule 42 (expr -> fun ( expr ) .)
    }               reduce using rule 42 (expr -> fun ( expr ) .)
    ELSE            reduce using rule 42 (expr -> fun ( expr ) .)
    :               reduce using rule 42 (expr -> fun ( expr ) .)


state 112

    (44) in -> FOR ID = expr : expr . in
    (12) expr -> expr . + expr
    (13) expr -> expr . - expr
    (14) expr -> expr . * expr
    (15) expr -> expr . / expr
    (16) expr -> expr . DOTADD expr
    (17) expr -> expr . DOTMINUS expr
    (18) expr -> expr . DOTTIMES expr
    (19) expr -> expr . DOTDIVIDE expr
    (26) expr -> expr . '
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTDIVIDE       shift and go to state 63
    '               shift and go to state 64
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    in                             shift and go to state 114

state 113

    (46) in -> IF ( cond ) in ELSE . in
    (5) in -> . ;
    (6) in -> . { ins }
    (7) in -> . ID = expr ;
    (8) in -> . ID ASSIGNADD expr ;
    (9) in -> . ID ASSIGNMINUS expr ;
    (10) in -> . ID ASSIGNMUL expr ;
    (11) in -> . ID ASSIGNDIV expr ;
    (43) in -> . WHILE ( cond ) in
    (44) in -> . FOR ID = expr : expr in
    (45) in -> . IF ( cond ) in
    (46) in -> . IF ( cond ) in ELSE in
    (47) in -> . BREAK ;
    (48) in -> . CONTINUE ;
    (49) in -> . RETURN expr ;
    (50) in -> . PRINT seq ;
    (51) in -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    in                             shift and go to state 115

state 114

    (44) in -> FOR ID = expr : expr in .

    ;               reduce using rule 44 (in -> FOR ID = expr : expr in .)
    {               reduce using rule 44 (in -> FOR ID = expr : expr in .)
    ID              reduce using rule 44 (in -> FOR ID = expr : expr in .)
    WHILE           reduce using rule 44 (in -> FOR ID = expr : expr in .)
    FOR             reduce using rule 44 (in -> FOR ID = expr : expr in .)
    IF              reduce using rule 44 (in -> FOR ID = expr : expr in .)
    BREAK           reduce using rule 44 (in -> FOR ID = expr : expr in .)
    CONTINUE        reduce using rule 44 (in -> FOR ID = expr : expr in .)
    RETURN          reduce using rule 44 (in -> FOR ID = expr : expr in .)
    PRINT           reduce using rule 44 (in -> FOR ID = expr : expr in .)
    $end            reduce using rule 44 (in -> FOR ID = expr : expr in .)
    }               reduce using rule 44 (in -> FOR ID = expr : expr in .)
    ELSE            reduce using rule 44 (in -> FOR ID = expr : expr in .)


state 115

    (46) in -> IF ( cond ) in ELSE in .

    ;               reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    {               reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    ID              reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    WHILE           reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    FOR             reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    IF              reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    BREAK           reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    CONTINUE        reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    RETURN          reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    PRINT           reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    $end            reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    }               reduce using rule 46 (in -> IF ( cond ) in ELSE in .)
    ELSE            reduce using rule 46 (in -> IF ( cond ) in ELSE in .)

